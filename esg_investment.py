# -*- coding: utf-8 -*-
"""ESG Investment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MeNtccevp2-jEcLBGi64YHnckrgwK15i

# **ESG Sentiment Analysis**
**GOAL:** Analyzing ESG related text from company reports, financial disclosure and media.
We will compare sentiment scores with company's ESG rating. If HIGH ESG rating but NEGATIVE media sentiment, then it's potential greenwashing.

### **Data Colletion: Collecting ESG scores using Yahoo Finance API**
"""

!pip install yahooquery

from yahooquery import Ticker
import pandas as pd

ticker = ["AAPL", "MSFT", "GOOGL", "AMZN", "META", "GE", "PEP", "JPM", "DELL", "JNJ", "IBM", "WMT"]
company = Ticker(ticker)

esg_data = company.esg_scores
esg_df = pd.DataFrame(esg_data).T

esg_df.reset_index(inplace=True)
esg_df.rename(columns={"index": "symbol"}, inplace=True)
print(esg_df)

"""### **Sentimental Analysis**

#### ***Get ESG News Data***
"""

!pip install newsapi-python

from newsapi import NewsApiClient

newsapi = NewsApiClient(api_key="a2774e258ab44659ada4a44f4a805e04")
articles = newsapi.get_everything(q="ESG sustainability", language="en", sort_by="relevancy")

news_df = pd.DataFrame(articles["articles"])[["title", "description", "url"]]
print(news_df.head())

"""#### ***Perform Sentiment Analysis***"""

!pip install nltk

from nltk.sentiment import SentimentIntensityAnalyzer
import nltk

nltk.download('vader_lexicon')
sia = SentimentIntensityAnalyzer()

news_df["sentiment_score"] = news_df["title"].apply(lambda x: sia.polarity_scores(str(x))["compound"])
print(news_df.head())

!pip install transformers torch

from transformers import pipeline

sentiment_pipeline = pipeline("sentiment-analysis")
print(sentiment_pipeline("Apple Inc. claims to be carbon neutral by 2030, but reports suggest otherwise."))

"""### **Detect Greenwashing**"""

company_list = ["Apple", "Microsoft", "Google", "Meta", "Amazon", "General Electric", "PepsiCo", "Dell Technologies", "IBM", "JPMorgan Chase", "Johnson & Johnson", "Walmart" ]
company_sentiments = {}

for company in company_list:
    articles = newsapi.get_everything(q=f"{company} ESG",
                                      language="en",
                                      sort_by="relevancy")

    news_df = pd.DataFrame(articles["articles"])[["title", "description"]]
    news_df["sentiment_score"] = news_df["title"].apply(lambda x: sia.polarity_scores(str(x))["compound"])
    company_sentiments[company] = news_df["sentiment_score"].mean()

company_symbol_map = {
    "Apple": "AAPL",
    "Microsoft": "MSFT",
    "Google": "GOOGL",
    "Amazon": "AMZN",
    "Meta": "META",
    "General Electric": "GE",
    "PepsiCo": "PEP",
    "JPMorgan Chase": "JPM",
    "Dell Technologies": "DELL",
    "Johnson & Johnson": "JNJ",
    "IBM": "IBM",
    "Walmart": "WMT"
}

sentiment_df = pd.DataFrame(list(company_sentiments.items()), columns=["company", "average_sentiment"])
sentiment_df["symbol"] = sentiment_df["company"].map(company_symbol_map)

esg_df = esg_df.merge(sentiment_df, on="symbol", how="left")

esg_df["greenwashing_risk"] = esg_df["totalEsg"] - esg_df["average_sentiment"]

print(esg_df[["symbol", "totalEsg", "average_sentiment", "greenwashing_risk"]])

"""### **Data Visualisation**"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

esg_df[['average_sentiment', 'greenwashing_risk']] = esg_df[['average_sentiment', 'greenwashing_risk']].apply(pd.to_numeric, errors='coerce')
esg_df = esg_df.dropna(subset=['average_sentiment', 'greenwashing_risk'])

sns.set(style="whitegrid")

plt.figure(figsize=(9, 6))

scatter = sns.scatterplot(
    data=esg_df, x='average_sentiment', y='greenwashing_risk',
    size='greenwashing_risk', sizes=(150, 600),
    hue='greenwashing_risk', palette='coolwarm',
    edgecolor='black', alpha=0.9
)

for i, row in esg_df.iterrows():
    plt.text(row['average_sentiment'], row['greenwashing_risk'] + 0.5,
             row['symbol'], fontsize=12, ha='center', fontweight='bold', color='black')

plt.title('Greenwashing Risk vs Sentiment', fontsize=14, fontweight='bold')
plt.xlabel('Average Sentiment (More Negative → Left)', fontsize=12)
plt.ylabel('Greenwashing Risk (Higher → More Risk)', fontsize=12)

plt.legend(title="Greenwashing Risk", bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)

if not esg_df.empty:
    sns.regplot(
        data=esg_df, x='average_sentiment', y='greenwashing_risk',
        scatter=False, color='blue', line_kws={"linestyle": "dashed", "alpha": 0.6}
    )

plt.show()

corr_matrix = esg_df[['average_sentiment', 'greenwashing_risk']].corr()

plt.figure(figsize=(6, 4))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)

plt.title("Correlation Heatmap: Sentiment vs Greenwashing Risk", fontsize=14, fontweight="bold")
plt.show()